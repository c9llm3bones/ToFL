Что такое язык Лукасевича
________________________________________________________________
Языком Лукасевича над n + 1 буквами называется контекстно-свободный
язык над алфавитом {a0, a1,...,an}, порождаемый грамматикой
S -> a0, S -> a1S, S -> a2SS, ..., S -> anS^n
Замечание: При любом n ∈ N грамматика является однозначной.
================================================================
Что такое язык Дика
________________________________________________________________
Языком Дика над 2n
буквами называется контекстно-свободный язык над алфавитом
{a1, b1, a2, b2,...,an, bn}, порождаемый грамматикой S → ε,
S → a1Sb1S, ..., S → anSbnS.
Замечание: Словами этого языка являются последовательности правильно вложенных скобок n типов.
Замечание: При любом n ∈ N грамматика является однозначной.
================================================================
Что такое автомат Мили
________________________________________________________________
Автомат Мили - это 6-ка (Q, Σ, Λ, δ, λ, q₀), где:
Q - множество состояний автомата
Σ - конечный входной алфавит
Λ - конечный выходной алфавит
δ - функция перехода, которая принимает текущее состояние и входной символ, и возвращает следующее состояние
λ - функция вывода, которая принимает текущее состояние и входной символ, и возвращает выходной символ
q₀ - начальное состояние
================================================================
Какие есть свойства у класса детерминированных контекстно-свободных языков
________________________________________________________________
Теорема: Каждый автоматный язык является детерминированным контекстно-свободным языком.
Теорема: Язык L ⊆ Σ∗ является детерминированным
контекстно-свободным языком тогда и только тогда, когда
найдётся такой детерминированный МП-автомат M' = <Q', Σ, Γ', ∆', I', F'>, что
L={w∈Σ∗ | <s,w,ε> |*-- <q,ε,α> для некоторых s∈I', q∈F', α∈Γ'∗}.
Теорема: Пусть L — детерминированный контекстно-свободный язык. Тогда язык L не является существенно
неоднозначным.
Теорема: Дополнение каждого детерминированного
контекстно-свободного языка является детерминированным
контекстно-свободным языком.
Пример: Язык L = {a^kb^mc^n | k != m или m != n}
над алфавитом {a, b, c} не является детерминированным контекстно-свободнымязыком, так как его дополнение не является
контекстно-свободным.
Теорема: Неверно, что для любых детерминированных контекстно-свободных языков L1 и L2 язык L1 ∩ L2
тоже является детерминированным контекстно-свободным
языком.
Теорема: Неверно, что для любых детерминированных контекстно-свободных языков L1 и L2 язык L1 ∪ L2
тоже является детерминированным контекстно-свободным языком.
================================================================
Что такое гомоморфизм афлавитов
________________________________________________________________
Пусть Σ1 и Σ2 — алфавиты. Если отображение h: Σ1∗ → Σ2∗ удовлетворяет условию h(x · y) = h(x)· h(y)
для всех слов x ∈ Σ1∗ и y ∈ Σ1∗, то отображение h называется
гомоморфизмом (морфизмом).
Замечание: Если h — гомоморфизм, то h(ε) = ε.
Пример: Пусть Σ1 = {a, b} и Σ2 = {c}. Тогда
отображение h: Σ1∗ → Σ2∗, заданное равенством h(w) = c^(2|w|), является гомоморфизмом.
Замечание: Каждый гомоморфизм однозначно определяется своими значениями на однобуквенных словах.
Определение: Если h: Σ1∗ → Σ2∗ — гомоморфизм и L ⊆ Σ1∗, то через h(L) обозначается язык {h(w) | w ∈ L}.
Пример: Пусть Σ = {a, b} и гомоморфизм h: Σ∗ → Σ∗ задан равенствами h(a) = abba и h(b) = ε. Тогда
h({baa, bb}) = {abbaabba, ε}.
Определение: Если h: Σ1∗ → Σ2∗ — гомоморфизм и L ⊆ Σ2∗, то через h^(−1)(L) обозначается язык {w ∈ Σ1∗ | h(w) ∈ L}.
Пример: Рассмотрим алфавит Σ = {a, b}. Пусть гомоморфизм h: Σ∗ → Σ∗ задан равенствами h(a) = ab и h(b) = abb.
Тогда h^(−1)({ε, abbb, abbab, ababab}) = {ε, ba, aaa}.
================================================================
Что такое алгоритм восходящего разбора
________________________________________________________________
Из книги Ахо-Ульман.
Алгоритм: Восходящий разбор с возвратами
Вход. КС-грамматика G = (N, Σ, P, S) без циклов и эпсилон-правил
(все ее правила занумерованы от 1 до р) и входная цепочка
w = a1a2...аn (n>=1).
Выход. Один обращенный правый разбор, если он существует, 
и слово «ошибка» в противном случае.
Определение: правый разбор цепочки ω в грамматике G = (N, Σ, P,S) -
это последовательность правил, с помощью которых можно свернуть цепочку ω
к начальному символу S.
Определение: Обращенный правый разбор - правый разбор, представленный в обратном порядке.
Метод.
(1) Произвольным образом упорядочить правила.
(2) Алгоритм будет изложен в терминах 4-компонентных
конфигураций. В конфигурации (s, i, α, β)
    (а) s представляет состояние алгоритма,
    (б) i представляет текущую позицию входного указателя
    (предполагается, что (n + 1)-м входным символом служит
    правый концевой маркер $),
    (в) α — содержимое магазина L1 (верх которого расположен справа)
    (г) β — содержимое магазина L2 (верх которого расположен слева).

Алгоритм может находиться в одном из трех
состояний q, b или t. В магазине L1 будет храниться цепочка
терминалов и нетерминалов, из которой выводится часть
входной цепочки, расположенная слева от входного указателя.
В магазине L2 будет храниться история переносов и сверток,
необходимых для получения из входной цепочки содержимого
магазина L1,
(3) Начальная конфигурация алгоритма — (q, 1$, е),
(4) Сам алгоритм работает так. Начинаем с попытки
применить шаг 1.

Шаг 1. Попытка свертки
(q, i, αβ, γ) ├─ (q, i, αA, jγ)
при условии, что А -> β — правило из Р с номером j и β
первая правая часть в линейном упорядочении, определенном в (1),
которая является суффиксом цепочки αβ. Номер этого правила
записывается в L2. Если шаг 1 применим, повторить его.
В противном случае перейти к шагу 2.

Шаг 2. Перенос
(q,i,α,γ) ├─ (q, i+1, αai, sγ)
при условии, что i!=n+1. Перейти к шагу 1.
Если i == n+1, перейти к шагу 3.
При выполнении шага 2 i-й входной символ переносится в
верхнюю часть магазина L1, позиция входного указателя
увеличивается и в магазин L2 записывается s, чтобы указать, что
сделан перенос.

Шаг 3. Допускание
(q, n+1, $S, γ) ├─ (t, n+1, $S, γ)
Выдать h(y), где h — гомоморфизм, определенный равенствами
h(s)=e, h(j) = j для всех номеров правил, h(γ) — обращенный
правый разбор цепочки w. После этого остановиться.
Если шаг 3 неприменим, перейти к шагу 4.

Шаг 4. Переход в состояние возврата
(q, n+1, α, γ) ├─ (b, n+1, α, γ)
при условии, что a!=$S. Перейти к шагу 5.
Шаг 5. Возврат
(а) (b, i, αА, jγ) ├─ (q, i, α'B, kγ)
если А—>β — правило из Р с номером j, а следующим
правилом в упорядочении (1), правая часть которого является
суффиксом цепочки αβ, является правило В —> β' с номером k.
(Заметим, что αβ=α'β'.) Перейти к шагу 1. (Здесь происходит
возврат к предыдущей свертке и делается попытка свертки с
помощью следующей альтернативы.)

(б) (b, n+1, αA, jγ) ├─ (b, n+1, αβ, γ)
если А—>β — правило из Р с номером j и для цепочки αβ не
остается никакой другой свертки. Перейти к шагу 5. (Если
других сверток не существует, надо «взять назад» данную свертку
н продолжать возврат, оставляя входной указатель на позициии n+1.) 


(в) (b, i, αA, jγ) ├─ (q, i + 1, αβa, sγ)
если i!=n+1, А—>β — правило из Р с номером j и для αβ не
остается никакой другой свертки. Здесь символ а = аl переносится в 
магазин L1, а символ s поступает в L2. Перейти к шагу 1.
(Мы вернулись к предыдущей свертке и,
сверток нет, попробуем сделать перенос.)

(г) (b, i αa, sγ) ├─ (b, i-1, α, γ)
если наверху магазина L2 находится символ переноса s. (Здесь
в позиции i исчерпаны все альтернативы и надо «взять назад»
операцию переноса. Входной указатель сдвигается влево,
терминальный символ устраняется из L1, а символ переноса s —
из L2). Если этот шаг невыполним, объявить об ошибке.
Пример: Применим описанный алгоритм восходящего раз-
разбора к грамматике G с правилами
      (1) E -> E+T
      (2) E -> T
      (3) T -> T*F
      (4) T -> F
      (5) F -> a
Если наверху магазина L1 появится Е+Т, то сначала
попытаемся сделать свертку, используя Е—>Е+Т, а потом —
используя Е—>Т. Если же появится Т*F, то сначала попробуем
T->T*F, а потом T—>F. Для входа а*а восходящий алго-
алгоритм пройдет через конфигурации
(q,1,$,e) ├─ (q,2,$a,   s)
          ├─ (q,2,$F,   5s)
          ├─ (q,2,$T,   45s)
          ├─ (q,2,$E,   245s)
          ├─ (q,3,$E*,  s245s)
          ├─ (q,4,$E*a, ss245s)
          ├─ (q,4,$E*F, 5ss245s)
          ├─ (q,4,$E*T, 45ss245s)
          ├─ (q,4,$E*E, 245ss245s)
          ├─ (b,4,$E*E, 245ss245s)
          ├─ (b,4,$E*T, 45ss245s)
          ├─ (b,4,$E*F, 5ss245s)
          ├─ (b,4,$E*a, ss245s)
          ├─ (b,3,$E*,  s245s)
          ├─ (b,2,$E,   245s)
          ├─ (q,3,$T*,  s45s)
          ├─ (q,4,$T*a, ss45s)
          ├─ (q,4,$T*F, 5ss45s)
          ├─ (q,4,$T,   35ss45s)
          ├─ (q,4,$E,   235ss45s)
          ├─ (t,4,$E,   235ss45s)
================================================================
Что такое алгебра контекстно-свободных языков
________________________________________________________________
Алгебраические свойства КС-языков:
Если L — контекстно-свободный язык, то
L∗ тоже контекстно-свободный язык.
Если L1 и L2 — контекстно-свободные языки над алфавитом Σ, то L1 · L2 тоже контекстно-свободный
язык.
Если L1 и L2 — контекстно-свободные языки над алфавитом Σ, то L1 ∪ L2 тоже контекстно-свободный
язык.
Если L — контекстно-свободный язык, то
L^R тоже контекстно-свободный язык.
Если L — КС-язык, а R — регулярный язык, то L ∩ R — КС-язык.
Дополнение КС-языка в общем случае не является КС-языком.
================================================================
Что такое деревья вывода по формальной грамматике
________________________________________________________________
Выводам в контекстно-свободной грамматике соответствуют так называемые деревья вывода (или деревья
разбора) — некоторые упорядоченные деревья, вершины которых помечены символами алфавита N ∪ Σ. 
Cимволы из терминального алфавита помечают листья дерева. Все вершины, помеченные нетерминалами, 
имеют детей. Корень дерева отвечает начальному символу. Каждому символу слова w1,  
на которую заменяется начальный символ на первом шаге вывода, ставится в соответствие вершина 
дерева, и к ней проводится дуга из корня. Полученные таким образом непосредственные потомки 
корня упорядочены согласно порядку их меток в слове w1. Для тех из  полученных вершин, которые 
помечены символами из множества N, делается аналогичное построение и т. д. 
Кроной дерева вывода называется слово, записанное в вершинах, помеченных символами из алфавита Σ.

Листья дерева — это конечные символы, которые мы получаем в результате последовательного 
применения правил.


Пример: Рассмотрим контекстно-свободную грамматику
S -> SS, S -> ab, S -> aSb. Выводу S -> SS -> Sab -> SSab -> abSab -> ababab соответствует следующее дерево вывода:
        S
       / \
      S   S
     / \  |\
    S   S a b
   /|   |\
  a b   a b
================================================================
Что такое неукорачивающие контекстно-зависимые грамматики
________________________________________________________________
Контекстной грамматикой (контекстно-зависимой грамматикой, грамматикой непосредственно
составляющих, НС-грамматикой, грамматикой типа 1)
называется порождающая грамматика, каждое правило которой имеет вид
ηAθ → ηαθ, где A ∈ N, η ∈ (N ∪ Σ)^∗, θ ∈ (N ∪ Σ)^∗, α ∈ (N ∪ Σ)^+.
Определение: Порождающая грамматика называется
неукорачивающей, если для каждого правила (α -> β) ∈ P
выполняется неравенство |α| <= |β|.
Теорема: Существует алгоритм, позволяющий по
произвольной неукорачивающей грамматике G и по слову w
узнать, верно ли, что w ∈ L(G).
Теорема: Каждая контекстная грамматика является неукорачивающей. Каждая неукорачивающая грамматика
эквивалентна некоторой контекстной грамматике.
Пример: Грамматика S -> AST A, S -> AbA, A -> a,
bT -> bb, AT -> TA эквивалентна контекстной грамматике S -> ASTA, S -> AbA, A -> a,
bT -> bb, AT -> UT, UT -> UV, UV -> TV, TV -> TA.
================================================================
Перечисли свойства регулярных выражений
________________________________________________________________
Регулярные выражения образуют ассоциативное полукольцо с операциями (0, +, 1, ·), то есть для любых
регулярных выражений e, f и g выполняются следующие тождества:
Замечение: В этих тождествах + используется для обозначения объединения.
1. e+f = f+e,
2. e+0 = e,
3. (e+f)+g = e+(f+g),
4. e·1 = e,
5. 1·e = e,
6. (e·f)·g = e·(f·g),
7. e·(f+g) = e·f+e·g,
8. (f+g)·e = f·e+g·e,
9. e·0=0,
10. 0·e = 0.
Равенство понимается как равенство языков, задаваемых
регулярными выражениями.
Для любых регулярных выражений e и f
выполняются следующие тождества:
1. e+e = e,
2. (1+e+ee+ ... +e^(n−1))(e^n)∗ = e∗ для любого n >= 1,
3. (e∗f)∗e∗ = (e+f)∗,
4. 1+e(fe)∗f = (ef)∗.
Лемма: Для любых регулярных выражений e, f и g,
если e = ef+g и ε !∈ L(f), то e = gf∗. (или e = ef|g )
================================================================
Что такое перевод конечного автомата в регулярное выражение, приведи пример такого перевода
________________________________________________________________
Это процесс преобразования конечного автомата в регулярное выражение, 
которое описывает тот же язык, что и автомат.

Регулярное выражение (англ. regular expression) над алфавитом Σ={c1,c2,…,ck} — способ порождения языка над Σ.
 Определяется рекурсивно следующим образом:
Для любого i слово ci является регулярным выражением, задающим язык из одного слова ci.

ε является регулярным выражением, задающим язык из одной пустой строки, а ∅ — пустой язык.

Если α1 и α2 являются регулярными выражениями, задающими языки L1 и L2 соответственно,
то (α1)|(α2) — регулярное выражение, задающее L1 ⋃ L2.

Если α1 и α2 являются регулярными выражениями, задающими языки L1 и L2 соответственно,
то (α1)(α2) — регулярное выражение, задающее L1L2.

Если α1 является регулярным выражением, задающим язык L1,
то (α1)^∗ — регулярное выражение, задающее L1∗.

Операции указаны в порядке возрастания приоритета, при этом скобки повышают приоритет аналогично арифметическим выражениям.

Пример. Пусть Σ = {a, b}. Тогда (((ab)^∗)(1+a)) является
регулярным выражениемнад алфавитом Σ.

Определение: Распознающий автомат (или просто конечный автомат) – это пятёрка A = {Q, Σ, δ, F, q0}, в которой:
Q – конечное множество состояний;
Σ – конечный алфавит;
δ : Q × Σ → Q – функция переходов;
F ⊆ Q – множество принимающих (или заключительных) состояний;
q0 ∈ Q – начальное состояние.

Определение: Детерминированный конечный автомат (ДКА) – это конечный автомат, 
в котором для каждого состояния и каждого символа входного алфавита существует ровно один переход.


Одним из способов преобразования конечного автомата в регулярное выражение является
алгебраический метод Бжозовского (метод преобразования детерминированных конечных автоматов в регулярные выражения).

Описание способа:
При преобразовании ДКА в регулярное выражение создается система регулярных выражений 
для каждого состояния в ДКА, а затем она решается для регулярных выражений Ri, связанных 
с терминальным состояниями qi. Построение уравнения происходит следующим образом: для каждого состояния qi уравнение Ri
является объединением переходов, ведущих в это состояние. Переход a из qi в qj обозначается за aRi. Если qi
- терминальное состояние, то в Ri добавляется ε. Это приводит к системе уравнений вида:

Замечание: + эквивалентен | в регулярном выражении

⎧R1=a1R1+a2∗R2+a3R3+... 
⎪R2=a1R1+a2∗R2+a3R3+...+ε (R2 - терминальное состояние)
...
⎩Rm=a1R1+a2R2+a3R3+...

где ak = ∅ если нет перехода от Ri к Rj. Система может быть решена с помощью простой подстановки, 
за исключением случаев, когда неизвестное появляется как в правой, так и в левой части уравнения. 
Это решает уравнение вида R=Q+RP, где P!=ε, имеет решение R=QP^∗. ( + эквивалентен | )

Пример использования: 
Задача: Требуется построить регулярное выражение, удовлетворяющее ДКА.
Q={q1,q2,q3,q4}
X={a,b}
F={q1,q4}
δ = {<q1, b> -> q3; <q1, a> -> q2; <q3, a> -> q1; <q3, b> -> q4; <q2, a> -> q4;
<q2, b> -> q1; <q4, b> -> q4; <q4,a> -> q4}

Решение по методу Бжозовского:

⎧R1=bR2+aR3+ε
⎪R2=aR1
⎨R3=bR1
⎩R4=aR2+bR3+aR4+bR4+ε

Рассмотрим первое терминальное состояние.

R1=ε+abR1+baR1=ε+R1(ab+ba)

Воспользуемся уравнением вида R=Q+RP.

R1=(ab+ba)^∗

Рассмотрим второе терминальное состояние.

R4=R1(aa+bb)+R4(a+b)= R1(aa+bb)(a+b)^∗ = (ab+ba)∗(aa+bb)(a+b)^∗

Объединим выражения для терминальных состояний и получим искомое регулярное выражение:

R=R1+R4=(ab+ba)^∗(ε+(aa+bb)(a+b)^∗).
Или R=(ab|ba)^∗(ε|(aa|bb)(a|b)^∗).
================================================================