Контекстно-свободная (КС) грамматика это
________________________________________________________________
КС грамматика - это грамматика, у которой в левых частях всех правил стоят только одиночные нетерминалы.
Язык, задаваемый контекстно-свободной грамматикой, называется контекстно-свободным языком.
КС-грамматика: G = <N, ∑, P, S>, где правила имеют вид: A → β, где β ∈ (N + ∑)*
================================================================
Левосторонний (Левый) вывод в КС грамматике это
________________________________________________________________
Вывод в КС-грамматике левосторонний (левый), если на каждом шаге вывода заменяется самое левое из всех вхождений нетерминальных символов, 
то есть каждый шаг вывода имеет вид: uAθ —> uβθ, где (A → β) ∈ P, A ∈ N и θ ∈ (N U ∑)*, u ∈ ∑*.
Левосторонний вывод однозначно восстанавливается по дереву вывода.
================================================================
Леворекурсивная КС грамматика это
________________________________________________________________
Леворекурсивная грамматика - это грамматика, в которой есть нетерминал, который может быть заменен на себя самого в левом направлении, то есть грамматика, имеющая хотя бы один леворекурсивный нетерминал.
================================================================
Праворекурсивная КС грамматика это
________________________________________________________________
Праворекурсивная грамматика - это грамматика, в которой есть нетерминал, который может быть заменен на себя самого в правом направлении, то есть грамматика, имеющая хотя бы один праворекурсивный нетерминал.
================================================================
Рекурсивная КС грамматика это
________________________________________________________________
Рекурсивная грамматика - это грамматика,  в которой все нетерминалы рекурсивные (кроме, может быть, S). Нетерминал A КС грамматики называется рекурсивным, если A → αAβ для некоторых α и β. 
Если α = ε, то A называется леворекурсивным; если β = ε, то A называется праворекурсивным.
================================================================
Бесполезный символ (нетерминал) в КС грамматике это
________________________________________________________________
Символ D (нетерминал) - бесполезный, если в грамматике нет вывода вида S → *wDy → *wvy, где v, w, y ∈ ∑*
================================================================
Неукорачивающая КС грамматика это
________________________________________________________________
Неукорачивающая КС грамматика -  это грамматика без ε-правил. Пример неукорачивающей КС грамматики: S → aSb | a.
================================================================
КС грамматика с цепным правилом это
________________________________________________________________
Цепное правило — это правило, при котором один нетерминал заменяется на другой нетерминал без появления терминальных символов.
Например, правила вида A → B и B → C.
================================================================
КС грамматика без циклов
________________________________________________________________
КС грамматика без циклов - это КС грамматика, в которой нет правила: A → +A. То есть, нетерминалы не могут быть заменены на себя самого через любое количество шагов.
Пример КС грамматики без циклов:
S → aAb | ε
A → b | c
================================================================
Приведённая КС грамматика это
________________________________________________________________
Приведённая КС грамматика - это грамматика без циклов, без бесполезных символов и без цепных правил.
================================================================
Алгоритм удаления бесполезных (непорождающих) символов в КС грамматике
________________________________________________________________
1. Берём все правила, в правой части которых есть только терминалы. Берём оттуда
множество всех нетерминалов слева.
2. Берём все правила, в правой части которых встречаются нетерминалы только из нашего
множества. Добавляем нетерминалы слева в наше множество. Повторяем.
3. На каком то шаге множество стабилизируется (все выводимые правила будут учтены). В нашем
множестве остались терминалы и все небесполезные нетерминалы.
4. Берём разность всех нетерминалов и нетерминалов из нашего построенного множества. Это
будут бесполезные нетерминалы.
5. Удаляем все правила, в которых встречаются бесполезные нетерминалы
================================================================
Алгоритм удаления недостижимых символов
________________________________________________________________
1. Берём множество, состоящее из S.
2. Добавляем в наше множество все нетерминалы и терминалы, которые стоят в правой части
правил, в левой части которых нетерминалы из нашего множества.
3. На каком-то шаге множество стабилизируется (все выводимые правила будут учтены). В нашем
множестве остались только достижимые символы (терминалы и нетерминалы).
4. Берём разность всех нетерминалов и нетерминалов из нашего построенного множества. Это
будут бесполезные нетерминалы. То же самое и с терминалами.
5. Удаляем все правила, в которых встречаются бесполезные нетерминалы. То же самое и с терминалами.
================================================================
Алгоритм удаления ε-правил
________________________________________________________________
1. Определение ε-нетерминалов:
Инициализируйте множество ε-нетерминалов.
Если стартовый символ S является ε-нетерминалом, добавьте его в множество ε-нетерминалов.
Найдите все нетерминалы, которые могут выводить пустую строку (ε). Начните с правил вида A → ε и добавьте A в множество ε-нетерминалов.
Затем, пока возможно, для каждого правила B → α, если все символы в α — это ε-нетерминалы, добавьте B в множество ε-нетерминалов.
2. Удаление ε-правил:
Удалите все правила вида A → ε из грамматики.
3. Создание новых правил:
Для каждого правила вида A → α, где в α есть ε-нетерминал:
Создайте новые правила, например, если у вас есть правило A → B C и B — ε-нетерминал, добавьте правило A → C.
4. Повторение процесса:
Повторите шаги 1-3, пока не удалите все ε-правила.
================================================================
Алгоритм удаления цепного правила
________________________________________________________________
Этапы алгоритма:
1. Поиск всех цепных правил.
2. Для каждого найденного цепного правила строим замыкание, выясняя, какие терминальные символы могут быть выведены из данного нетерминала.
3. После завершения построения замыкания заменяем исходные цепные правила новыми.

Рассмотрим грамматику:
S → A | b
A → B | a
B → c
1. Поиск цепных правил:
Найденные цепные правила:  S → A  и  A → B.
2. Построение замыкания:
Для  S → A:
- Начинаем с  A:
A → B
Из  B  получаем  B → c.
A → a
Получаем S → a.
Добавляем  S → c и S → a в множество.
- Для  A → B:
У нас уже есть  B → c, поэтому добавляем  A → c.
3. Замена цепных правил:
Добавляем новые правила:
S → a
S → c
A → c
Удаляем исходные цепные правила.
4. Итоговая грамматика:
S → b | a | c
A → a | c
B → c
================================================================