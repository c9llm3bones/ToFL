1.  Сколько решений может иметь уравнение с регулярными коэффициентами?
_______________________________________________________________
Не все уравнения с регулярными коэффициентами имеют единственное решение. Например: X=αX+β 
— уравнение с регулярными коэффициентами, и α обозначает множество, содержащее пустую 
цепочку (ε) , то X = α*(β+γ) будет решением этого уравнения для любого γ (γ не обязано даже быть 
регулярным). Таким образом уравнение имеет бесконечное множество решений. Тогда мы будем 
брать наименьшее решение, которое назовём наименьшей неподвижной точкой. Наименьшая 
неподвижная точка для нашего уравнения — X=α*β.
===============================================================
2. В каком случае применим метод рекурсивного спуска?
_______________________________________________________________
Метод рекурсивного спуска применим в том случае, если каждое правило
грамматики имеет вид:
a) либо A -> α, где α ∈ (VT ∪ VN)* и это единственное правило вывода для
этого нетерминала;
b) либо A -> a1(α)1 | a2(α)2 | ... | an(α)n, где ai ∈ VT для всех i = 1,2,...,n; ai не равно aj для i не равно j; (α)i ∈ (VT ∪ VN)*
, т. е. если для нетерминала А правил вывода несколько, то они
должны начинаться с терминалов, причем все эти терминалы должны быть
различными.
VT - алфавит терминальных символов (терминалов)
VN - алфавит нетерминальных символов (нетерминалов), не пересекающийся с VT
===============================================================
3. Если грамматика не имеет вид, к которому возможно применить метод рекурсивного спуска, то существует ли эквивалентная КС-грамматика, для которой метод рекурсивного спуска применим? 
________________________________________________________________
К сожалению, нет алгоритма, отвечающего на
поставленный вопрос, т.е. это алгоритмически неразрешимая проблема.
================================================================
4. Конструкция автомата Глушкова. 
________________________________________________________________
Алгоритм построения Glushkov(r)
 1. Строим линеаризованную версию r: r(Lin)=Linearize(r).
 2. Ищем First{r(Lin)}, Last{r(Lin)} и [Follow{r(Lin)}(q)] для всех q ∈ Σ{r(Lin)}.
 Все состояния автомата, кроме начального (назовём его S),
 соответствуют буквам q ∈ Σ{r(Lin)}.
 3. Из начального состояния строим переходы в те состояния, для которых q ∈ First{r(Lin)}. Переходы имеют вид S → q по q.
 4. Переходы из состояния q соответствуют элементам d множества [Follow{r(Lin)}(q)] и имеют вид
q → d по d.
 5. Конечные состояния—такие, что q ∈ Last{r(Lin)}, а также S, если ε ∈ L(R).
 6. Теперь стираем разметку, построенную линеаризацией, на переходах автомата. Конструкция завершена.
================================================================
5. Является ли автомат Glushkov(r) детерминированным для 1-однозначных регулярных выражений?
_______________________________________________________________
Регулярное выражение является 1-однозначным, если возможно однозначно определить, какая позиция символа в регулярном выражении должна соответствовать символу во входном слове, не заглядывая за пределы этого символа во входном слове.
Да, является. Эту его особенность активно используют в современных библиотеках регулярных
выражений, например, в RE2. Выигрыш может получиться
колоссальным: например, Thompson((a∗)∗) является экспоненциально неоднозначным, а Glushkov((a∗)∗) однозначен и детерминирован.
===============================================================
6. Какое значение имеет свойство изолированности подграфов, распознающих регулярные выражения, в контексте автоматов Глушкова?
_______________________________________________________________
Подграфы, распознающие регулярные выражения, являющиеся подструктурами исходного, не имеют общих вершин. Это свойство автомата Глушкова используется в реализациях match-функций некоторых библиотек регулярных выражений.
Подграфы в этом контексте это конструкции для частей регулярного выражения. Например, в регулярном выражении (ba | b)aa(a | ab)* для (ba | b)в автомате есть свой подграф, который с остальной частью автомата не пересекается.
===============================================================
7. Пример работы алгоритма Глушкова.
Рассмотрим регулярное выражение e=((a(ab)∗)∗)(ba)∗ :
1. Линеаризуем его путем добавления индекса к каждому символу:
e′=((a_1(a_2b_3)∗)∗)(b_4a_5)∗.
2. Составим множества First, Last, и Follow:
First(e′)={a_1, b_4};
Last(e′)={a_1, b_3, a_5};
Follow(e′)={a_1a_2, a_1a_1, a_2b_3, b_3a_1, b_3a_2, b_4a_5, a_5b_4}.
Так как пустое слово ∈ языку, то Λ(e′)={ε}*.
*Λ(e′)={ε}∩L(e′)
3. Автомат локального языка L′=(First)′(B^∗) ∩ (B^∗)(Last)′ ∖ (B^∗)(B^2 ∖ (Follow)′)(B^∗) содержит начальное состояние, обозначенное как 1, и состояния для каждого из пяти символов алфавита B={a_1, a_2, b_3, b_4, a_5}.
В построенном автомате существует переход из 1 (соответствующего пустой строке) в два состояния из First′, переход из a в b если ab ∈ Follow′, три состояния S терминальные (как и состояние 1).
Получим автомат для L(e), удалив индексы, добавленные на первом этапе.===============================================================
8. Детерминизация методом подмножеств: как сделать из НКА ДКА?
_______________________________________________________________
Как сделать из НКА ДКА? Убрать одноимённые переходы и избавиться от ε-переходов. В описанном алгоритме, если рассматривать КА как граф, то это классический BFS (обход в ширину), с схлопыванием ε-переходов и объединением состояний, в которые ведут одноимённые переходы. 

Шаг 1. Помещаем в очередь Queue множество, состоящее только из стартовой вершины.
Шаг 2. Затем, пока очередь не пуста выполняем следующие действия:

Достаем из очереди множество, назовем его q

Для всех c ∈ Σ посмотрим в какое состояние ведет переход по символу c из каждого состояния в q. Полученное множество состояний положим в очередь Queue только если оно не лежало там раньше. Каждое такое множество в итоговом ДКА будет отдельной вершиной, в которую будут вести переходы по соответствующим символам.

Если в множестве q хотя бы одна из вершин была терминальной в НКА, то соответствующая данному множеству вершина в ДКА также будет терминальной.

Вход: НKA = (Q, Σ, δ, q0, F).
Выход: ДКА = (Q', Σ, δ', q0', F').
===============================================================
9. Асимптотика алгоритма Томпсона.
_______________________________________________________________
Так как количество подмножеств множества состояний НКА не более, чем 2^n, а каждое подмножество мы обрабатываем ровно один раз за время O(n), получаем верхнюю оценку времени работы алгоритма — O(n*2^n).
===============================================================
10. Каким может быть количество состояний в ДКА по сравнению с количеством состояний в эквивалентном НКА?________________________________________________
Количество состояний в эквивалентном ДКА в худшем случае растёт экспоненциально с ростом количества состояний исходного НКА. Для реальных языков НКА и ДКА имеют примерно одинаковое количество состояний, без экспоненциального 
поведения. 
===============================================================
11. Описание НКА через матрицы.
_______________________________________________________________
НКА можно описать посредством трёх матриц: вектор начальных состояний (в классическом определении оно одно); матрица переходов между состояниями; и вектор конечных состояний.
Тогда естественно строить объединение, конкатенацию и
итерацию НКА посредством матричных операций.
===============================================================
12. Какое влияние имеет левая рекурсия на алгоритмы синтаксического анализа, и почему её необходимо удалять при использовании методов разбора сверху вниз?
_______________________________________________________________
Алгоритмы синтаксического анализа легче строить тогда, когда КС-грамматика не обладает свойствами лево рекурсивности. Это особенно важно при использовании методов разбора сверху вниз и слева направо. Выбор продукции из множества альтернативных в этих методах базируется на сравнении порождённого крайнего левого символа промежуточной цепочки с текущим символом входной терминальной цепочки. При появлении же в выводе левой рекурсии произойдёт зацикливание. Поэтому при использовании алгоритмов нисходящего разбора левую рекурсию необходимо удалить. 
===============================================================
13. Сформулируй утверждение (Куроки–Суонио).
_______________________________________________________________
Всякая LL(k)-грамматика может быть преобразована в LL(k+1)-грамматику без ε-правил.
===============================================================
14. Что означает термин "ловушка" при построении ДКА?
_______________________________________________________________
Это состояния, из которых не достижимы финальные. Нужны для корректного построения дополнения к автомату.
Если ловушка единственна, то это не конечное состояние с переходами лишь в себя. Нужны для корректного задания ДКА, но иногда по умолчанию не описываются. Используем при построении автомата.
===============================================================
15. Свойства автомата Томпсона.
_______________________________________________________________
1. Автомат Томпсона повторяет структуру регулярного выражения.
2. Автомат Томпсона имеет единственное финальное состояние. Нет переходов в стартовые и из финального состояния.
3. Из каждой вершины максимально возможное число переходов - 2.
Минус автомата Томпсона: недетерминизм - часто происходят недетерминированные переходы.
===============================================================